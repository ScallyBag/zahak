//go:build ignore
// +build ignore

package main

import (
	"fmt"
	"os"

	. "github.com/amanjpro/zahak/engine"
	// . "github.com/amanjpro/zahak/zahak"
)

var netPath = "default.nn"
var Version = "dev"

func main() {
	generateVersionInfo()
	generateNetCode(netPath, fmt.Sprintf("engine%cnn.go", os.PathSeparator), "Default")
	for i := 1; i < 7; i++ {
		generateNetCode(fmt.Sprintf("skills/skills_%d.nn", i), fmt.Sprintf("engine%cnn_%d.go", os.PathSeparator, i), fmt.Sprintf("Skills%d", i))
	}
	specifyCurrentNet()
}

func generateVersionInfo() {
	// Save the version info
	v, err := os.Create(fmt.Sprintf("zahak%cversion.go", os.PathSeparator))
	if err != nil {
		panic(err)
	}
	defer v.Close()

	v.WriteString("package main\n\n")
	v.WriteString("// Code generated by go generate; DO NOT EDIT.\n\n")
	v.WriteString("func init() {\n")
	v.WriteString(fmt.Sprintf("version = \"%s\"\n", Version))
	v.WriteString("}\n")
}

func specifyCurrentNet() {
	v, err := os.Create(fmt.Sprintf("engine%cnn_current.go", os.PathSeparator))
	if err != nil {
		panic(err)
	}
	defer v.Close()

	v.WriteString("package engine\n\n")
	v.WriteString("// Code generated by go generate; DO NOT EDIT.\n\n")
	v.WriteString("func init() {\n")
	v.WriteString("DefaultInit()\n")
	v.WriteString("Skills1Init()\n")
	v.WriteString("Skills2Init()\n")
	v.WriteString("Skills3Init()\n")
	v.WriteString("Skills4Init()\n")
	v.WriteString("Skills5Init()\n")
	v.WriteString("Skills6Init()\n")
	v.WriteString("CurrentHiddenWeights = DefaultHiddenWeights\n")
	v.WriteString("CurrentHiddenBiases = DefaultHiddenBiases\n")
	v.WriteString("CurrentOutputWeights = DefaultOutputWeights\n")
	v.WriteString("CurrentOutputBias = DefaultOutputBias\n")
	v.WriteString("CurrentNetworkId = DefaultNetworkId\n")
	v.WriteString("NetHiddenSize = DefaultNetHiddenSize\n")
	v.WriteString("}\n")
}

func generateNetCode(netPath string, output string, outputFieldPrefix string) {
	err := LoadNetwork(netPath)
	if err != nil {
		panic(err)
	}

	f, err := os.Create(output)
	if err != nil {
		panic(err)
	}
	defer f.Close()

	f.WriteString("package engine\n\n")
	f.WriteString("// Code generated by go generate; DO NOT EDIT.\n\n")
	f.WriteString(fmt.Sprintf("func %sInit() {\n", outputFieldPrefix))

	f.WriteString(fmt.Sprintf("%sHiddenWeights = []float32 {\n", outputFieldPrefix))
	for i := 0; i < len(CurrentHiddenWeights); i++ {
		if i%10 == 0 {
			f.WriteString("\n")
		}
		f.WriteString(fmt.Sprintf("%g,", CurrentHiddenWeights[i]))
	}
	f.WriteString("\n}\n")

	f.WriteString(fmt.Sprintf("%sHiddenBiases = []float32 {\n", outputFieldPrefix))
	for i := 0; i < len(CurrentHiddenBiases); i++ {
		if i%10 == 0 {
			f.WriteString("\n")
		}
		f.WriteString(fmt.Sprintf("%g,", CurrentHiddenBiases[i]))
	}
	f.WriteString("\n}\n")

	f.WriteString(fmt.Sprintf("%sOutputWeights = []float32 {\n", outputFieldPrefix))
	for i := 0; i < len(CurrentOutputWeights); i++ {
		if i%10 == 0 {
			f.WriteString("\n")
		}
		f.WriteString(fmt.Sprintf("%g,", CurrentOutputWeights[i]))
	}
	f.WriteString("\n}\n")

	f.WriteString(fmt.Sprintf("%sOutputBias = %g\n", outputFieldPrefix, CurrentOutputBias))
	f.WriteString(fmt.Sprintf("%sNetworkId = %d\n", outputFieldPrefix, CurrentNetworkId))
	f.WriteString(fmt.Sprintf("%sNetHiddenSize = %d\n", outputFieldPrefix, NetHiddenSize))

	f.WriteString("}\n")
}
