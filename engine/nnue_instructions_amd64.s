//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

TEXT Â·_update_hidden(SB), $72-56

	MOVQ previous_outputs+0(FP), DI
	MOVQ update_indices+8(FP), SI
	MOVQ update_coeffs+16(FP), DX
	MOVQ update_size+24(FP), CX
	MOVQ weights+32(FP), R8
	MOVQ outputs+40(FP), R9
	MOVQ outputs_len+48(FP), R10
	ADDQ $8, SP
	MOVQ R10, 56(SP)

	LONG $0x24648b44; BYTE $0x38 // mov    r12d, dword 56[rsp] /* [rbp + 16] */
	WORD $0x8545; BYTE $0xe4     // test    r12d, r12d
	JLE  LBB0_33
	WORD $0x8945; BYTE $0xe5     // mov    r13d, r12d
	LONG $0x20fc8341             // cmp    r12d, 32
	JB   LBB0_2
	LONG $0xaf048d4a             // lea    rax, [rdi + 4*r13]
	WORD $0x394c; BYTE $0xc8     // cmp    rax, r9
	JBE  LBB0_6
	LONG $0xa9048d4b             // lea    rax, [r9 + 4*r13]
	WORD $0x3948; BYTE $0xf8     // cmp    rax, rdi
	JBE  LBB0_6

LBB0_2:
	WORD $0x3145; BYTE $0xf6 // xor    r14d, r14d

LBB0_12:
	WORD $0x894d; BYTE $0xf2 // mov    r10, r14
	WORD $0xf749; BYTE $0xd2 // not    r10
	WORD $0x014d; BYTE $0xea // add    r10, r13
	WORD $0x894c; BYTE $0xe8 // mov    rax, r13
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_14

LBB0_13:
	LONG $0xb71c8b42 // mov    ebx, dword [rdi + 4*r14]
	LONG $0xb11c8943 // mov    dword [r9 + 4*r14], ebx
	LONG $0x01c68349 // add    r14, 1
	LONG $0xffc08348 // add    rax, -1
	JNE  LBB0_13

LBB0_14:
	LONG $0x03fa8349 // cmp    r10, 3
	JB   LBB0_16

LBB0_15:
	LONG $0xb7048b42             // mov    eax, dword [rdi + 4*r14]
	LONG $0xb1048943             // mov    dword [r9 + 4*r14], eax
	LONG $0xb7448b42; BYTE $0x04 // mov    eax, dword [rdi + 4*r14 + 4]
	LONG $0xb1448943; BYTE $0x04 // mov    dword [r9 + 4*r14 + 4], eax
	LONG $0xb7448b42; BYTE $0x08 // mov    eax, dword [rdi + 4*r14 + 8]
	LONG $0xb1448943; BYTE $0x08 // mov    dword [r9 + 4*r14 + 8], eax
	LONG $0xb7448b42; BYTE $0x0c // mov    eax, dword [rdi + 4*r14 + 12]
	LONG $0xb1448943; BYTE $0x0c // mov    dword [r9 + 4*r14 + 12], eax
	LONG $0x04c68349             // add    r14, 4
	WORD $0x394d; BYTE $0xf5     // cmp    r13, r14
	JNE  LBB0_15
	JMP  LBB0_16

LBB0_6:
	WORD $0x8945; BYTE $0xee // mov    r14d, r13d
	LONG $0xe0e68341         // and    r14d, -32
	LONG $0xe0468d49         // lea    rax, [r14 - 32]
	WORD $0x8949; BYTE $0xc2 // mov    r10, rax
	LONG $0x05eac149         // shr    r10, 5
	LONG $0x01c28349         // add    r10, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_34
	WORD $0x894d; BYTE $0xd3 // mov    r11, r10
	LONG $0xfee38349         // and    r11, -2
	WORD $0xf749; BYTE $0xdb // neg    r11
	WORD $0xdb31             // xor    ebx, ebx

LBB0_8:
	LONG $0x0410fcc5; BYTE $0x9f               // vmovups    ymm0, yword [rdi + 4*rbx]
	LONG $0x4c10fcc5; WORD $0x209f             // vmovups    ymm1, yword [rdi + 4*rbx + 32]
	LONG $0x5410fcc5; WORD $0x409f             // vmovups    ymm2, yword [rdi + 4*rbx + 64]
	LONG $0x5c10fcc5; WORD $0x609f             // vmovups    ymm3, yword [rdi + 4*rbx + 96]
	LONG $0x117cc1c4; WORD $0x9904             // vmovups    yword [r9 + 4*rbx], ymm0
	LONG $0x117cc1c4; WORD $0x994c; BYTE $0x20 // vmovups    yword [r9 + 4*rbx + 32], ymm1
	LONG $0x117cc1c4; WORD $0x9954; BYTE $0x40 // vmovups    yword [r9 + 4*rbx + 64], ymm2
	LONG $0x117cc1c4; WORD $0x995c; BYTE $0x60 // vmovups    yword [r9 + 4*rbx + 96], ymm3
	QUAD $0x0000809f846ffec5; BYTE $0x00       // vmovdqu    ymm0, yword [rdi + 4*rbx + 128]
	QUAD $0x0000a09f8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdi + 4*rbx + 160]
	QUAD $0x0000c09f946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdi + 4*rbx + 192]
	QUAD $0x0000e09f9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdi + 4*rbx + 224]
	QUAD $0x008099847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r9 + 4*rbx + 128], ymm0
	QUAD $0x00a0998c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r9 + 4*rbx + 160], ymm1
	QUAD $0x00c099947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r9 + 4*rbx + 192], ymm2
	QUAD $0x00e0999c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r9 + 4*rbx + 224], ymm3
	LONG $0x40c38348                           // add    rbx, 64
	LONG $0x02c38349                           // add    r11, 2
	JNE  LBB0_8
	LONG $0x01c2f641                           // test    r10b, 1
	JE   LBB0_11

LBB0_10:
	LONG $0x046ffec5; BYTE $0x9f               // vmovdqu    ymm0, yword [rdi + 4*rbx]
	LONG $0x4c6ffec5; WORD $0x209f             // vmovdqu    ymm1, yword [rdi + 4*rbx + 32]
	LONG $0x546ffec5; WORD $0x409f             // vmovdqu    ymm2, yword [rdi + 4*rbx + 64]
	LONG $0x5c6ffec5; WORD $0x609f             // vmovdqu    ymm3, yword [rdi + 4*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x9904             // vmovdqu    yword [r9 + 4*rbx], ymm0
	LONG $0x7f7ec1c4; WORD $0x994c; BYTE $0x20 // vmovdqu    yword [r9 + 4*rbx + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x9954; BYTE $0x40 // vmovdqu    yword [r9 + 4*rbx + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x995c; BYTE $0x60 // vmovdqu    yword [r9 + 4*rbx + 96], ymm3

LBB0_11:
	WORD $0x394d; BYTE $0xee // cmp    r14, r13
	JNE  LBB0_12

LBB0_16:
	WORD $0x8545; BYTE $0xe4     // test    r12d, r12d
	JLE  LBB0_33
	WORD $0xc985                 // test    ecx, ecx
	JLE  LBB0_33
	WORD $0xc889                 // mov    eax, ecx
	LONG $0x24448948; BYTE $0x30 // mov    qword [rsp + 48], rax
	LONG $0xa9048d4b             // lea    rax, [r9 + 4*r13]
	LONG $0x24448948; BYTE $0x10 // mov    qword [rsp + 16], rax
	LONG $0xa8048d4b             // lea    rax, [r8 + 4*r13]
	LONG $0x24448948; BYTE $0x20 // mov    qword [rsp + 32], rax
	WORD $0x8945; BYTE $0xee     // mov    r14d, r13d
	LONG $0xe0e68341             // and    r14d, -32
	WORD $0x894c; BYTE $0xe8     // mov    rax, r13
	WORD $0xf748; BYTE $0xd8     // neg    rax
	LONG $0x24448948; BYTE $0x28 // mov    qword [rsp + 40], rax
	LONG $0x60408d49             // lea    rax, [r8 + 96]
	LONG $0x24448948; BYTE $0x08 // mov    qword [rsp + 8], rax
	LONG $0x04408d49             // lea    rax, [r8 + 4]
	LONG $0x24448948; BYTE $0x18 // mov    qword [rsp + 24], rax
	WORD $0xff31                 // xor    edi, edi
	WORD $0x634d; BYTE $0xfc     // movsxd    r15, r12d
	JMP  LBB0_20

LBB0_19:
	LONG $0x01c78348             // add    rdi, 1
	LONG $0x247c3b48; BYTE $0x30 // cmp    rdi, qword [rsp + 48]
	JE   LBB0_33

LBB0_20:
	LONG $0x1cbf0f4c; BYTE $0x7e // movsx    r11, word [rsi + 2*rdi]
	LONG $0xdfaf0f4d             // imul    r11, r15
	LONG $0x14be0f44; BYTE $0x3a // movsx    r10d, byte [rdx + rdi]
	LONG $0x20fc8341             // cmp    r12d, 32
	JB   LBB0_21
	LONG $0x24448b48; BYTE $0x20 // mov    rax, qword [rsp + 32]
	LONG $0x98048d4a             // lea    rax, [rax + 4*r11]
	WORD $0x394c; BYTE $0xc8     // cmp    rax, r9
	JBE  LBB0_25
	LONG $0x98048d4b             // lea    rax, [r8 + 4*r11]
	LONG $0x24443b48; BYTE $0x10 // cmp    rax, qword [rsp + 16]
	JAE  LBB0_25

LBB0_21:
	WORD $0xdb31 // xor    ebx, ebx

LBB0_28:
	WORD $0x8948; BYTE $0xd8 // mov    rax, rbx
	LONG $0x01c5f641         // test    r13b, 1
	JE   LBB0_30
	LONG $0x1b048d4a         // lea    rax, [rbx + r11]
	LONG $0x80048b41         // mov    eax, dword [r8 + 4*rax]
	LONG $0xc2af0f41         // imul    eax, r10d
	LONG $0x99040141         // add    dword [r9 + 4*rbx], eax
	WORD $0x8948; BYTE $0xd8 // mov    rax, rbx
	LONG $0x01c88348         // or    rax, 1

LBB0_30:
	WORD $0xf748; BYTE $0xd3     // not    rbx
	LONG $0x245c3b48; BYTE $0x28 // cmp    rbx, qword [rsp + 40]
	JE   LBB0_19
	LONG $0x244c8b48; BYTE $0x18 // mov    rcx, qword [rsp + 24]
	LONG $0x991c8d4a             // lea    rbx, [rcx + 4*r11]

LBB0_32:
	LONG $0xfc834c8b             // mov    ecx, dword [rbx + 4*rax - 4]
	LONG $0xcaaf0f41             // imul    ecx, r10d
	LONG $0x810c0141             // add    dword [r9 + 4*rax], ecx
	WORD $0x0c8b; BYTE $0x83     // mov    ecx, dword [rbx + 4*rax]
	LONG $0xcaaf0f41             // imul    ecx, r10d
	LONG $0x814c0141; BYTE $0x04 // add    dword [r9 + 4*rax + 4], ecx
	LONG $0x02c08348             // add    rax, 2
	WORD $0x3949; BYTE $0xc5     // cmp    r13, rax
	JNE  LBB0_32
	JMP  LBB0_19

LBB0_25:
	WORD $0x8944; BYTE $0xe1       // mov    ecx, r12d
	WORD $0x894c; BYTE $0xc0       // mov    rax, r8
	LONG $0x6e79c1c4; BYTE $0xc2   // vmovd    xmm0, r10d
	LONG $0xc070f9c5; BYTE $0x00   // vpshufd    xmm0, xmm0, 0
	LONG $0x187de3c4; WORD $0x01c0 // vinsertf128    ymm0, ymm0, xmm0, 1
	LONG $0x245c8b48; BYTE $0x08   // mov    rbx, qword [rsp + 8]
	LONG $0x9b248d4e               // lea    r12, [rbx + 4*r11]
	WORD $0x3145; BYTE $0xc0       // xor    r8d, r8d

LBB0_26:
	LONG $0x407902c4; WORD $0x8444; BYTE $0xa0 // vpmulld    xmm8, xmm0, oword [r12 + 4*r8 - 96]
	LONG $0x197de3c4; WORD $0x01c2             // vextractf128    xmm2, ymm0, 1
	LONG $0x406982c4; WORD $0x845c; BYTE $0xb0 // vpmulld    xmm3, xmm2, oword [r12 + 4*r8 - 80]
	LONG $0x407902c4; WORD $0x844c; BYTE $0xc0 // vpmulld    xmm9, xmm0, oword [r12 + 4*r8 - 64]
	LONG $0x406982c4; WORD $0x846c; BYTE $0xd0 // vpmulld    xmm5, xmm2, oword [r12 + 4*r8 - 48]
	LONG $0x407902c4; WORD $0x8454; BYTE $0xe0 // vpmulld    xmm10, xmm0, oword [r12 + 4*r8 - 32]
	LONG $0x406982c4; WORD $0x847c; BYTE $0xf0 // vpmulld    xmm7, xmm2, oword [r12 + 4*r8 - 16]
	LONG $0x407902c4; WORD $0x841c             // vpmulld    xmm11, xmm0, oword [r12 + 4*r8]
	LONG $0x406982c4; WORD $0x8454; BYTE $0x10 // vpmulld    xmm2, xmm2, oword [r12 + 4*r8 + 16]
	LONG $0xfe6181c4; WORD $0x815c; BYTE $0x10 // vpaddd    xmm3, xmm3, oword [r9 + 4*r8 + 16]
	LONG $0xfe3981c4; WORD $0x8124             // vpaddd    xmm4, xmm8, oword [r9 + 4*r8]
	LONG $0xfe5181c4; WORD $0x816c; BYTE $0x30 // vpaddd    xmm5, xmm5, oword [r9 + 4*r8 + 48]
	LONG $0xfe3181c4; WORD $0x8174; BYTE $0x20 // vpaddd    xmm6, xmm9, oword [r9 + 4*r8 + 32]
	LONG $0xfe4181c4; WORD $0x817c; BYTE $0x50 // vpaddd    xmm7, xmm7, oword [r9 + 4*r8 + 80]
	LONG $0xfe2981c4; WORD $0x814c; BYTE $0x40 // vpaddd    xmm1, xmm10, oword [r9 + 4*r8 + 64]
	LONG $0xfe6901c4; WORD $0x8144; BYTE $0x70 // vpaddd    xmm8, xmm2, oword [r9 + 4*r8 + 112]
	LONG $0xfe2181c4; WORD $0x8154; BYTE $0x60 // vpaddd    xmm2, xmm11, oword [r9 + 4*r8 + 96]
	LONG $0x7f7a81c4; WORD $0x8124             // vmovdqu    oword [r9 + 4*r8], xmm4
	LONG $0x7f7a81c4; WORD $0x815c; BYTE $0x10 // vmovdqu    oword [r9 + 4*r8 + 16], xmm3
	LONG $0x7f7a81c4; WORD $0x8174; BYTE $0x20 // vmovdqu    oword [r9 + 4*r8 + 32], xmm6
	LONG $0x7f7a81c4; WORD $0x816c; BYTE $0x30 // vmovdqu    oword [r9 + 4*r8 + 48], xmm5
	LONG $0x7f7a81c4; WORD $0x814c; BYTE $0x40 // vmovdqu    oword [r9 + 4*r8 + 64], xmm1
	LONG $0x7f7a81c4; WORD $0x817c; BYTE $0x50 // vmovdqu    oword [r9 + 4*r8 + 80], xmm7
	LONG $0x7f7a81c4; WORD $0x8154; BYTE $0x60 // vmovdqu    oword [r9 + 4*r8 + 96], xmm2
	LONG $0x7f7a01c4; WORD $0x8144; BYTE $0x70 // vmovdqu    oword [r9 + 4*r8 + 112], xmm8
	LONG $0x20c08349                           // add    r8, 32
	WORD $0x394d; BYTE $0xc6                   // cmp    r14, r8
	JNE  LBB0_26
	WORD $0x894c; BYTE $0xf3                   // mov    rbx, r14
	WORD $0x394d; BYTE $0xee                   // cmp    r14, r13
	WORD $0x8949; BYTE $0xc0                   // mov    r8, rax
	WORD $0x8941; BYTE $0xcc                   // mov    r12d, ecx
	JE   LBB0_19
	JMP  LBB0_28

LBB0_33:
	SUBQ $8, SP
	VZEROUPPER
	RET

LBB0_34:
	WORD $0xdb31     // xor    ebx, ebx
	LONG $0x01c2f641 // test    r10b, 1
	JNE  LBB0_10
	JMP  LBB0_11

TEXT Â·_quick_feed(SB), $0-40

	MOVQ hidden_outputs+0(FP), DI
	MOVQ hidden_outputs_len+8(FP), SI
	MOVQ weights+16(FP), DX
	MOVQ weights_len+24(FP), CX
	MOVQ res+32(FP), R8

	WORD $0xc985             // test    ecx, ecx
	JLE  LBB1_1
	WORD $0x8941; BYTE $0xca // mov    r10d, ecx
	WORD $0x3145; BYTE $0xc9 // xor    r9d, r9d
	WORD $0xf983; BYTE $0x20 // cmp    ecx, 32
	JAE  LBB1_4
	WORD $0xc931             // xor    ecx, ecx
	WORD $0xf631             // xor    esi, esi
	JMP  LBB1_7

LBB1_1:
	WORD $0xf631 // xor    esi, esi
	JMP  LBB1_8

LBB1_4:
	WORD $0x8944; BYTE $0xd1     // mov    ecx, r10d
	WORD $0xe183; BYTE $0xe0     // and    ecx, -32
	LONG $0xef3141c4; BYTE $0xc9 // vpxor    xmm9, xmm9, xmm9
	WORD $0xf631                 // xor    esi, esi
	LONG $0xef3941c4; BYTE $0xc0 // vpxor    xmm8, xmm8, xmm8
	LONG $0xef1941c4; BYTE $0xe4 // vpxor    xmm12, xmm12, xmm12
	LONG $0xef2941c4; BYTE $0xd2 // vpxor    xmm10, xmm10, xmm10
	LONG $0xef2141c4; BYTE $0xdb // vpxor    xmm11, xmm11, xmm11

LBB1_5:
	LONG $0x3d39e2c4; WORD $0xb76c; BYTE $0x10 // vpmaxsd    xmm5, xmm8, oword [rdi + 4*rsi + 16]
	LONG $0x3d39e2c4; WORD $0xb734             // vpmaxsd    xmm6, xmm8, oword [rdi + 4*rsi]
	LONG $0x3d39e2c4; WORD $0xb77c; BYTE $0x30 // vpmaxsd    xmm7, xmm8, oword [rdi + 4*rsi + 48]
	LONG $0x3d39e2c4; WORD $0xb764; BYTE $0x20 // vpmaxsd    xmm4, xmm8, oword [rdi + 4*rsi + 32]
	LONG $0x3d39e2c4; WORD $0xb744; BYTE $0x50 // vpmaxsd    xmm0, xmm8, oword [rdi + 4*rsi + 80]
	LONG $0x3d39e2c4; WORD $0xb74c; BYTE $0x40 // vpmaxsd    xmm1, xmm8, oword [rdi + 4*rsi + 64]
	LONG $0x3d39e2c4; WORD $0xb754; BYTE $0x70 // vpmaxsd    xmm2, xmm8, oword [rdi + 4*rsi + 112]
	LONG $0x3d39e2c4; WORD $0xb75c; BYTE $0x60 // vpmaxsd    xmm3, xmm8, oword [rdi + 4*rsi + 96]
	LONG $0x4049e2c4; WORD $0xb234             // vpmulld    xmm6, xmm6, oword [rdx + 4*rsi]
	LONG $0x4051e2c4; WORD $0xb26c; BYTE $0x10 // vpmulld    xmm5, xmm5, oword [rdx + 4*rsi + 16]
	LONG $0x4059e2c4; WORD $0xb264; BYTE $0x20 // vpmulld    xmm4, xmm4, oword [rdx + 4*rsi + 32]
	LONG $0x4041e2c4; WORD $0xb27c; BYTE $0x30 // vpmulld    xmm7, xmm7, oword [rdx + 4*rsi + 48]
	LONG $0x4071e2c4; WORD $0xb24c; BYTE $0x40 // vpmulld    xmm1, xmm1, oword [rdx + 4*rsi + 64]
	LONG $0x4079e2c4; WORD $0xb244; BYTE $0x50 // vpmulld    xmm0, xmm0, oword [rdx + 4*rsi + 80]
	LONG $0x406162c4; WORD $0xb26c; BYTE $0x60 // vpmulld    xmm13, xmm3, oword [rdx + 4*rsi + 96]
	LONG $0x4069e2c4; WORD $0xb254; BYTE $0x70 // vpmulld    xmm2, xmm2, oword [rdx + 4*rsi + 112]
	LONG $0x197d63c4; WORD $0x01cb             // vextractf128    xmm3, ymm9, 1
	LONG $0xdbfed1c5                           // vpaddd    xmm3, xmm5, xmm3
	LONG $0xeefeb1c5                           // vpaddd    xmm5, xmm9, xmm6
	LONG $0x185563c4; WORD $0x01cb             // vinsertf128    ymm9, ymm5, xmm3, 1
	LONG $0x197d63c4; WORD $0x01e3             // vextractf128    xmm3, ymm12, 1
	LONG $0xdbfec1c5                           // vpaddd    xmm3, xmm7, xmm3
	LONG $0xe4fe99c5                           // vpaddd    xmm4, xmm12, xmm4
	LONG $0x185d63c4; WORD $0x01e3             // vinsertf128    ymm12, ymm4, xmm3, 1
	LONG $0x197d63c4; WORD $0x01d3             // vextractf128    xmm3, ymm10, 1
	LONG $0xc3fef9c5                           // vpaddd    xmm0, xmm0, xmm3
	LONG $0xc9fea9c5                           // vpaddd    xmm1, xmm10, xmm1
	LONG $0x187563c4; WORD $0x01d0             // vinsertf128    ymm10, ymm1, xmm0, 1
	LONG $0x197d63c4; WORD $0x01d8             // vextractf128    xmm0, ymm11, 1
	LONG $0xc0fee9c5                           // vpaddd    xmm0, xmm2, xmm0
	LONG $0xfe11c1c4; BYTE $0xcb               // vpaddd    xmm1, xmm13, xmm11
	LONG $0x187563c4; WORD $0x01d8             // vinsertf128    ymm11, ymm1, xmm0, 1
	LONG $0x20c68348                           // add    rsi, 32
	WORD $0x3948; BYTE $0xf1                   // cmp    rcx, rsi
	JNE  LBB1_5
	LONG $0x197d63c4; WORD $0x01c8             // vextractf128    xmm0, ymm9, 1
	LONG $0x197d63c4; WORD $0x01e1             // vextractf128    xmm1, ymm12, 1
	LONG $0xc0fef1c5                           // vpaddd    xmm0, xmm1, xmm0
	LONG $0xfe19c1c4; BYTE $0xc9               // vpaddd    xmm1, xmm12, xmm9
	LONG $0x197d63c4; WORD $0x01d2             // vextractf128    xmm2, ymm10, 1
	LONG $0x197d63c4; WORD $0x01db             // vextractf128    xmm3, ymm11, 1
	LONG $0xd3fee9c5                           // vpaddd    xmm2, xmm2, xmm3
	LONG $0xc2fef9c5                           // vpaddd    xmm0, xmm0, xmm2
	LONG $0xfe29c1c4; BYTE $0xd3               // vpaddd    xmm2, xmm10, xmm11
	LONG $0xcafef1c5                           // vpaddd    xmm1, xmm1, xmm2
	LONG $0xc0fef1c5                           // vpaddd    xmm0, xmm1, xmm0
	LONG $0xc870f9c5; BYTE $0xee               // vpshufd    xmm1, xmm0, 238
	LONG $0xc1fef9c5                           // vpaddd    xmm0, xmm0, xmm1
	LONG $0xc870f9c5; BYTE $0x55               // vpshufd    xmm1, xmm0, 85
	LONG $0xc1fef9c5                           // vpaddd    xmm0, xmm0, xmm1
	LONG $0xc67ef9c5                           // vmovd    esi, xmm0
	WORD $0x394c; BYTE $0xd1                   // cmp    rcx, r10
	JE   LBB1_8

LBB1_7:
	WORD $0x048b; BYTE $0x8f // mov    eax, dword [rdi + 4*rcx]
	WORD $0xc085             // test    eax, eax
	LONG $0xc1480f41         // cmovs    eax, r9d
	LONG $0x8a04af0f         // imul    eax, dword [rdx + 4*rcx]
	WORD $0xc601             // add    esi, eax
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xca // cmp    r10, rcx
	JNE  LBB1_7

LBB1_8:
	WORD $0x8941; BYTE $0x30 // mov    dword [r8], esi
	VZEROUPPER
	RET
