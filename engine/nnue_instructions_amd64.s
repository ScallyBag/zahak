//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

TEXT Â·_update_hidden(SB), $136-88

	MOVQ white_previous_outputs+0(FP), DI
	MOVQ black_previous_outputs+8(FP), SI
	MOVQ white_update_indices+16(FP), DX
	MOVQ white_update_coeffs+24(FP), CX
	MOVQ black_update_indices+32(FP), R8
	MOVQ black_update_coeffs+40(FP), R9
	MOVQ update_size+48(FP), R10
	MOVQ weights+56(FP), R11
	MOVQ white_outputs+64(FP), R12
	MOVQ black_outputs+72(FP), R13
	MOVQ outputs_len+80(FP), R14
	ADDQ $8, SP
	MOVQ R14, 120(SP)
	MOVQ R13, 112(SP)
	MOVQ R12, 104(SP)
	MOVQ R11, 96(SP)
	MOVQ R10, 88(SP)

	LONG $0x24548948; BYTE $0x50 // mov    qword [rsp + 80], rdx
	LONG $0x78247c83; BYTE $0x00 // cmp    dword 120[rsp], 0 /* [rbp + 48] */
	JLE  LBB0_37
	WORD $0x8949; BYTE $0xcd     // mov    r13, rcx
	LONG $0x245c8b4c; BYTE $0x70 // mov    r11, qword 112[rsp] /* [rbp + 40] */
	LONG $0x24448b48; BYTE $0x68 // mov    rax, qword 104[rsp] /* [rbp + 32] */
	LONG $0x78244c8b             // mov    ecx, dword 120[rsp] /* [rbp + 48] */
	WORD $0xcb89                 // mov    ebx, ecx
	WORD $0xf983; BYTE $0x10     // cmp    ecx, 16
	LONG $0x244c894c; BYTE $0x20 // mov    qword [rsp + 32], r9
	LONG $0x2444894c; BYTE $0x18 // mov    qword [rsp + 24], r8
	LONG $0x246c894c; BYTE $0x10 // mov    qword [rsp + 16], r13
	JAE  LBB0_3
	WORD $0x3145; BYTE $0xf6     // xor    r14d, r14d

LBB0_17:
	WORD $0x894c; BYTE $0xf1       // mov    rcx, r14
	WORD $0xf748; BYTE $0xd1       // not    rcx
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_19
	LONG $0x107aa1c4; WORD $0xb704 // vmovss    xmm0, dword [rdi + 4*r14]
	LONG $0x117aa1c4; WORD $0xb004 // vmovss    dword [rax + 4*r14], xmm0
	LONG $0x107aa1c4; WORD $0xb604 // vmovss    xmm0, dword [rsi + 4*r14]
	LONG $0x117a81c4; WORD $0xb304 // vmovss    dword [r11 + 4*r14], xmm0
	LONG $0x01ce8349               // or    r14, 1

LBB0_19:
	WORD $0x0148; BYTE $0xd9 // add    rcx, rbx
	JE   LBB0_20

LBB0_38:
	LONG $0x107aa1c4; WORD $0xb704             // vmovss    xmm0, dword [rdi + 4*r14]
	LONG $0x117aa1c4; WORD $0xb004             // vmovss    dword [rax + 4*r14], xmm0
	LONG $0x107aa1c4; WORD $0xb604             // vmovss    xmm0, dword [rsi + 4*r14]
	LONG $0x117a81c4; WORD $0xb304             // vmovss    dword [r11 + 4*r14], xmm0
	LONG $0x107aa1c4; WORD $0xb744; BYTE $0x04 // vmovss    xmm0, dword [rdi + 4*r14 + 4]
	LONG $0x117aa1c4; WORD $0xb044; BYTE $0x04 // vmovss    dword [rax + 4*r14 + 4], xmm0
	LONG $0x107aa1c4; WORD $0xb644; BYTE $0x04 // vmovss    xmm0, dword [rsi + 4*r14 + 4]
	LONG $0x117a81c4; WORD $0xb344; BYTE $0x04 // vmovss    dword [r11 + 4*r14 + 4], xmm0
	LONG $0x02c68349                           // add    r14, 2
	WORD $0x394c; BYTE $0xf3                   // cmp    rbx, r14
	JNE  LBB0_38
	JMP  LBB0_20

LBB0_3:
	LONG $0x9b348d4d             // lea    r14, [r11 + 4*rbx]
	WORD $0x3949; BYTE $0xc6     // cmp    r14, rax
	LONG $0x2454970f; BYTE $0x28 // seta    byte [rsp + 40]
	LONG $0x980c8d48             // lea    rcx, [rax + 4*rbx]
	WORD $0x394c; BYTE $0xd9     // cmp    rcx, r11
	LONG $0xd7970f41             // seta    r15b
	LONG $0x9f148d48             // lea    rdx, [rdi + 4*rbx]
	WORD $0x3948; BYTE $0xc2     // cmp    rdx, rax
	LONG $0xd4970f41             // seta    r12b
	WORD $0x3948; BYTE $0xf9     // cmp    rcx, rdi
	LONG $0xd2970f41             // seta    r10b
	LONG $0x9e0c8d4c             // lea    r9, [rsi + 4*rbx]
	WORD $0x3949; BYTE $0xc1     // cmp    r9, rax
	LONG $0xd5970f41             // seta    r13b
	WORD $0x3948; BYTE $0xf1     // cmp    rcx, rsi
	LONG $0x2454970f; BYTE $0x0e // seta    byte [rsp + 14]
	WORD $0x394c; BYTE $0xda     // cmp    rdx, r11
	LONG $0xd0970f41             // seta    r8b
	WORD $0x3949; BYTE $0xfe     // cmp    r14, rdi
	LONG $0x2454970f; BYTE $0x0d // seta    byte [rsp + 13]
	WORD $0x394d; BYTE $0xd9     // cmp    r9, r11
	WORD $0x970f; BYTE $0xd2     // seta    dl
	WORD $0x3949; BYTE $0xf6     // cmp    r14, rsi
	WORD $0x970f; BYTE $0xd1     // seta    cl
	WORD $0x3145; BYTE $0xf6     // xor    r14d, r14d
	LONG $0x247c8444; BYTE $0x28 // test    byte [rsp + 40], r15b
	JNE  LBB0_4
	WORD $0x2045; BYTE $0xd4     // and    r12b, r10b
	LONG $0x244c8b4c; BYTE $0x20 // mov    r9, qword [rsp + 32]
	JNE  LBB0_6
	LONG $0x246c2244; BYTE $0x0e // and    r13b, byte [rsp + 14]
	JNE  LBB0_6
	LONG $0x24442244; BYTE $0x0d // and    r8b, byte [rsp + 13]
	LONG $0x24448b4c; BYTE $0x18 // mov    r8, qword [rsp + 24]
	LONG $0x246c8b4c; BYTE $0x10 // mov    r13, qword [rsp + 16]
	JNE  LBB0_17
	WORD $0xca20                 // and    dl, cl
	JNE  LBB0_17
	WORD $0x8941; BYTE $0xde     // mov    r14d, ebx
	LONG $0xf0e68341             // and    r14d, -16
	LONG $0xf04e8d49             // lea    rcx, [r14 - 16]
	WORD $0x8949; BYTE $0xca     // mov    r10, rcx
	LONG $0x04eac149             // shr    r10, 4
	LONG $0x01c28349             // add    r10, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB0_11
	WORD $0x894c; BYTE $0xd1     // mov    rcx, r10
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xd231                 // xor    edx, edx

LBB0_13:
	LONG $0x0410fcc5; BYTE $0x97               // vmovups    ymm0, yword [rdi + 4*rdx]
	LONG $0x4c10fcc5; WORD $0x2097             // vmovups    ymm1, yword [rdi + 4*rdx + 32]
	LONG $0x0411fcc5; BYTE $0x90               // vmovups    yword [rax + 4*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x2090             // vmovups    yword [rax + 4*rdx + 32], ymm1
	LONG $0x0410fcc5; BYTE $0x96               // vmovups    ymm0, yword [rsi + 4*rdx]
	LONG $0x4c10fcc5; WORD $0x2096             // vmovups    ymm1, yword [rsi + 4*rdx + 32]
	LONG $0x117cc1c4; WORD $0x9304             // vmovups    yword [r11 + 4*rdx], ymm0
	LONG $0x117cc1c4; WORD $0x934c; BYTE $0x20 // vmovups    yword [r11 + 4*rdx + 32], ymm1
	LONG $0x4410fcc5; WORD $0x4097             // vmovups    ymm0, yword [rdi + 4*rdx + 64]
	LONG $0x4c10fcc5; WORD $0x6097             // vmovups    ymm1, yword [rdi + 4*rdx + 96]
	LONG $0x4411fcc5; WORD $0x4090             // vmovups    yword [rax + 4*rdx + 64], ymm0
	LONG $0x4c11fcc5; WORD $0x6090             // vmovups    yword [rax + 4*rdx + 96], ymm1
	LONG $0x4410fcc5; WORD $0x4096             // vmovups    ymm0, yword [rsi + 4*rdx + 64]
	LONG $0x4c10fcc5; WORD $0x6096             // vmovups    ymm1, yword [rsi + 4*rdx + 96]
	LONG $0x117cc1c4; WORD $0x9344; BYTE $0x40 // vmovups    yword [r11 + 4*rdx + 64], ymm0
	LONG $0x117cc1c4; WORD $0x934c; BYTE $0x60 // vmovups    yword [r11 + 4*rdx + 96], ymm1
	LONG $0x20c28348                           // add    rdx, 32
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB0_13
	LONG $0x01c2f641                           // test    r10b, 1
	JE   LBB0_16

LBB0_15:
	LONG $0x0410fcc5; BYTE $0x97               // vmovups    ymm0, yword [rdi + 4*rdx]
	LONG $0x4c10fcc5; WORD $0x2097             // vmovups    ymm1, yword [rdi + 4*rdx + 32]
	LONG $0x0411fcc5; BYTE $0x90               // vmovups    yword [rax + 4*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x2090             // vmovups    yword [rax + 4*rdx + 32], ymm1
	LONG $0x0410fcc5; BYTE $0x96               // vmovups    ymm0, yword [rsi + 4*rdx]
	LONG $0x4c10fcc5; WORD $0x2096             // vmovups    ymm1, yword [rsi + 4*rdx + 32]
	LONG $0x117cc1c4; WORD $0x9304             // vmovups    yword [r11 + 4*rdx], ymm0
	LONG $0x117cc1c4; WORD $0x934c; BYTE $0x20 // vmovups    yword [r11 + 4*rdx + 32], ymm1

LBB0_16:
	WORD $0x3949; BYTE $0xde // cmp    r14, rbx
	JNE  LBB0_17

LBB0_20:
	LONG $0x78247c83; BYTE $0x00 // cmp    dword 120[rsp], 0 /* [rbp + 48] */
	JLE  LBB0_37
	LONG $0x58244c8b             // mov    ecx, dword 88[rsp] /* [rbp + 16] */
	WORD $0xc985                 // test    ecx, ecx
	JLE  LBB0_37
	LONG $0x24548b4c; BYTE $0x60 // mov    r10, qword 96[rsp] /* [rbp + 24] */
	WORD $0xc989                 // mov    ecx, ecx
	LONG $0x244c8948; BYTE $0x28 // mov    qword [rsp + 40], rcx
	LONG $0x98348d48             // lea    rsi, [rax + 4*rbx]
	LONG $0x9b0c8d49             // lea    rcx, [r11 + 4*rbx]
	LONG $0x244c8948; BYTE $0x40 // mov    qword [rsp + 64], rcx
	WORD $0x3948; BYTE $0xc1     // cmp    rcx, rax
	WORD $0x970f; BYTE $0xd1     // seta    cl
	LONG $0x9a3c8d49             // lea    rdi, [r10 + 4*rbx]
	LONG $0x247c8948; BYTE $0x38 // mov    qword [rsp + 56], rdi
	LONG $0x24748948; BYTE $0x48 // mov    qword [rsp + 72], rsi
	WORD $0x394c; BYTE $0xde     // cmp    rsi, r11
	WORD $0x970f; BYTE $0xd2     // seta    dl
	WORD $0xca20                 // and    dl, cl
	LONG $0x0f245488             // mov    byte [rsp + 15], dl
	WORD $0x8941; BYTE $0xdf     // mov    r15d, ebx
	LONG $0xf0e78341             // and    r15d, -16
	LONG $0x204a8d49             // lea    rcx, [r10 + 32]
	LONG $0x244c8948; BYTE $0x30 // mov    qword [rsp + 48], rcx
	WORD $0x3145; BYTE $0xf6     // xor    r14d, r14d
	JMP  LBB0_23

LBB0_36:
	LONG $0x01c68349             // add    r14, 1
	LONG $0x24743b4c; BYTE $0x28 // cmp    r14, qword [rsp + 40]
	JE   LBB0_37

LBB0_23:
	LONG $0x244c8b48; BYTE $0x50   // mov    rcx, qword [rsp + 80]
	LONG $0x24bf0f4e; BYTE $0x71   // movsx    r12, word [rcx + 2*r14]
	LONG $0x14bf0f4b; BYTE $0x70   // movsx    rdx, word [r8 + 2*r14]
	LONG $0x7824748b               // mov    esi, dword 120[rsp] /* [rbp + 48] */
	WORD $0x6348; BYTE $0xce       // movsxd    rcx, esi
	LONG $0xe1af0f4c               // imul    r12, rcx
	LONG $0xd1af0f48               // imul    rdx, rcx
	LONG $0x4cbe0f43; WORD $0x0035 // movsx    ecx, byte [r13 + r14]
	LONG $0xc12acac5               // vcvtsi2ss    xmm0, xmm6, ecx
	LONG $0x0cbe0f43; BYTE $0x31   // movsx    ecx, byte [r9 + r14]
	LONG $0xc92acac5               // vcvtsi2ss    xmm1, xmm6, ecx
	WORD $0xfe83; BYTE $0x10       // cmp    esi, 16
	JAE  LBB0_25
	WORD $0x3145; BYTE $0xd2       // xor    r10d, r10d

LBB0_34:
	LONG $0x24748b48; BYTE $0x60 // mov    rsi, qword 96[rsp] /* [rbp + 24] */
	LONG $0x960c8d48             // lea    rcx, [rsi + 4*rdx]
	LONG $0xa6148d4a             // lea    rdx, [rsi + 4*r12]

LBB0_35:
	LONG $0x597aa1c4; WORD $0x9214 // vmulss    xmm2, xmm0, dword [rdx + 4*r10]
	LONG $0x586aa1c4; WORD $0x9014 // vaddss    xmm2, xmm2, dword [rax + 4*r10]
	LONG $0x117aa1c4; WORD $0x9014 // vmovss    dword [rax + 4*r10], xmm2
	LONG $0x5972a1c4; WORD $0x9114 // vmulss    xmm2, xmm1, dword [rcx + 4*r10]
	LONG $0x586a81c4; WORD $0x9314 // vaddss    xmm2, xmm2, dword [r11 + 4*r10]
	LONG $0x117a81c4; WORD $0x9314 // vmovss    dword [r11 + 4*r10], xmm2
	LONG $0x01c28349               // add    r10, 1
	WORD $0x394c; BYTE $0xd3       // cmp    rbx, r10
	JNE  LBB0_35
	JMP  LBB0_36

LBB0_25:
	LONG $0x24448b4c; BYTE $0x60   // mov    r8, qword 96[rsp] /* [rbp + 24] */
	LONG $0x90348d49               // lea    rsi, [r8 + 4*rdx]
	LONG $0x244c8b48; BYTE $0x38   // mov    rcx, qword [rsp + 56]
	LONG $0x913c8d48               // lea    rdi, [rcx + 4*rdx]
	LONG $0xa0148d4f               // lea    r10, [r8 + 4*r12]
	LONG $0xa10c8d4e               // lea    r9, [rcx + 4*r12]
	WORD $0x3948; BYTE $0xc7       // cmp    rdi, rax
	LONG $0xd0970f41               // seta    r8b
	LONG $0x244c8b48; BYTE $0x48   // mov    rcx, qword [rsp + 72]
	WORD $0x3948; BYTE $0xce       // cmp    rsi, rcx
	LONG $0xd5920f41               // setb    r13b
	WORD $0x2045; BYTE $0xc5       // and    r13b, r8b
	LONG $0x246c0a44; BYTE $0x0f   // or    r13b, byte [rsp + 15]
	WORD $0x3949; BYTE $0xc1       // cmp    r9, rax
	LONG $0xd0970f41               // seta    r8b
	WORD $0x3949; BYTE $0xca       // cmp    r10, rcx
	LONG $0x2454920f; BYTE $0x0e   // setb    byte [rsp + 14]
	WORD $0x394c; BYTE $0xdf       // cmp    rdi, r11
	LONG $0xd7970f40               // seta    dil
	LONG $0x244c8b48; BYTE $0x40   // mov    rcx, qword [rsp + 64]
	WORD $0x3948; BYTE $0xce       // cmp    rsi, rcx
	LONG $0x2454920f; BYTE $0x0d   // setb    byte [rsp + 13]
	WORD $0x394d; BYTE $0xd9       // cmp    r9, r11
	LONG $0xd6970f40               // seta    sil
	WORD $0x3949; BYTE $0xca       // cmp    r10, rcx
	WORD $0x920f; BYTE $0xd1       // setb    cl
	WORD $0x8445; BYTE $0xed       // test    r13b, r13b
	JNE  LBB0_26
	LONG $0x24442244; BYTE $0x0e   // and    r8b, byte [rsp + 14]
	JNE  LBB0_26
	LONG $0x247c2240; BYTE $0x0d   // and    dil, byte [rsp + 13]
	LONG $0x24448b4c; BYTE $0x18   // mov    r8, qword [rsp + 24]
	LONG $0x246c8b4c; BYTE $0x10   // mov    r13, qword [rsp + 16]
	JNE  LBB0_29
	LONG $0x0000ba41; WORD $0x0000 // mov    r10d, 0
	WORD $0x2040; BYTE $0xce       // and    sil, cl
	LONG $0x244c8b4c; BYTE $0x20   // mov    r9, qword [rsp + 32]
	JNE  LBB0_34
	LONG $0x0479e3c4; WORD $0x00d0 // vpermilps    xmm2, xmm0, 0
	LONG $0x186de3c4; WORD $0x01d2 // vinsertf128    ymm2, ymm2, xmm2, 1
	LONG $0x0479e3c4; WORD $0x00d9 // vpermilps    xmm3, xmm1, 0
	LONG $0x1865e3c4; WORD $0x01db // vinsertf128    ymm3, ymm3, xmm3, 1
	LONG $0x244c8b48; BYTE $0x30   // mov    rcx, qword [rsp + 48]
	LONG $0xa13c8d4a               // lea    rdi, [rcx + 4*r12]
	LONG $0x91348d48               // lea    rsi, [rcx + 4*rdx]
	WORD $0xc931                   // xor    ecx, ecx

LBB0_32:
	LONG $0x6459ecc5; WORD $0xe08f             // vmulps    ymm4, ymm2, yword [rdi + 4*rcx - 32]
	LONG $0x2c59ecc5; BYTE $0x8f               // vmulps    ymm5, ymm2, yword [rdi + 4*rcx]
	LONG $0x2458dcc5; BYTE $0x88               // vaddps    ymm4, ymm4, yword [rax + 4*rcx]
	LONG $0x6c58d4c5; WORD $0x2088             // vaddps    ymm5, ymm5, yword [rax + 4*rcx + 32]
	LONG $0x2411fcc5; BYTE $0x88               // vmovups    yword [rax + 4*rcx], ymm4
	LONG $0x6c11fcc5; WORD $0x2088             // vmovups    yword [rax + 4*rcx + 32], ymm5
	LONG $0x6459e4c5; WORD $0xe08e             // vmulps    ymm4, ymm3, yword [rsi + 4*rcx - 32]
	LONG $0x2c59e4c5; BYTE $0x8e               // vmulps    ymm5, ymm3, yword [rsi + 4*rcx]
	LONG $0x585cc1c4; WORD $0x8b24             // vaddps    ymm4, ymm4, yword [r11 + 4*rcx]
	LONG $0x5854c1c4; WORD $0x8b6c; BYTE $0x20 // vaddps    ymm5, ymm5, yword [r11 + 4*rcx + 32]
	LONG $0x117cc1c4; WORD $0x8b24             // vmovups    yword [r11 + 4*rcx], ymm4
	LONG $0x117cc1c4; WORD $0x8b6c; BYTE $0x20 // vmovups    yword [r11 + 4*rcx + 32], ymm5
	LONG $0x10c18348                           // add    rcx, 16
	WORD $0x3949; BYTE $0xcf                   // cmp    r15, rcx
	JNE  LBB0_32
	WORD $0x894d; BYTE $0xfa                   // mov    r10, r15
	WORD $0x3949; BYTE $0xdf                   // cmp    r15, rbx
	JE   LBB0_36
	JMP  LBB0_34

LBB0_26:
	WORD $0x3145; BYTE $0xd2     // xor    r10d, r10d
	LONG $0x244c8b4c; BYTE $0x20 // mov    r9, qword [rsp + 32]
	LONG $0x24448b4c; BYTE $0x18 // mov    r8, qword [rsp + 24]
	LONG $0x246c8b4c; BYTE $0x10 // mov    r13, qword [rsp + 16]
	JMP  LBB0_34

LBB0_29:
	WORD $0x3145; BYTE $0xd2     // xor    r10d, r10d
	LONG $0x244c8b4c; BYTE $0x20 // mov    r9, qword [rsp + 32]
	JMP  LBB0_34

LBB0_37:
	SUBQ $8, SP
	VZEROUPPER
	RET

LBB0_11:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c2f641 // test    r10b, 1
	JNE  LBB0_15
	JMP  LBB0_16

LBB0_4:
	LONG $0x244c8b4c; BYTE $0x20 // mov    r9, qword [rsp + 32]

LBB0_6:
	LONG $0x24448b4c; BYTE $0x18 // mov    r8, qword [rsp + 24]
	LONG $0x246c8b4c; BYTE $0x10 // mov    r13, qword [rsp + 16]
	JMP  LBB0_17

TEXT Â·_quick_feed(SB), $0-40

	MOVQ hidden_outputs+0(FP), DI
	MOVQ hidden_outputs_len+8(FP), SI
	MOVQ weights+16(FP), DX
	MOVQ weights_len+24(FP), CX
	MOVQ res+32(FP), R8

	WORD $0xc985             // test    ecx, ecx
	JLE  LBB1_1
	WORD $0xc889             // mov    eax, ecx
	LONG $0xc057f8c5         // vxorps    xmm0, xmm0, xmm0
	WORD $0xf983; BYTE $0x20 // cmp    ecx, 32
	JAE  LBB1_4
	WORD $0xc931             // xor    ecx, ecx
	LONG $0xc957f0c5         // vxorps    xmm1, xmm1, xmm1
	JMP  LBB1_7

LBB1_1:
	LONG $0xc957f0c5 // vxorps    xmm1, xmm1, xmm1
	JMP  LBB1_8

LBB1_4:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xc957f0c5         // vxorps    xmm1, xmm1, xmm1
	WORD $0xf631             // xor    esi, esi
	LONG $0xd257e8c5         // vxorps    xmm2, xmm2, xmm2
	LONG $0xdb57e0c5         // vxorps    xmm3, xmm3, xmm3
	LONG $0xe457d8c5         // vxorps    xmm4, xmm4, xmm4
	LONG $0xed57d0c5         // vxorps    xmm5, xmm5, xmm5

LBB1_5:
	LONG $0x345ff4c5; BYTE $0xb7   // vmaxps    ymm6, ymm1, yword [rdi + 4*rsi]
	LONG $0x7c5ff4c5; WORD $0x20b7 // vmaxps    ymm7, ymm1, yword [rdi + 4*rsi + 32]
	LONG $0x445f74c5; WORD $0x40b7 // vmaxps    ymm8, ymm1, yword [rdi + 4*rsi + 64]
	LONG $0x4c5f74c5; WORD $0x60b7 // vmaxps    ymm9, ymm1, yword [rdi + 4*rsi + 96]
	LONG $0x3459ccc5; BYTE $0xb2   // vmulps    ymm6, ymm6, yword [rdx + 4*rsi]
	LONG $0xd258ccc5               // vaddps    ymm2, ymm6, ymm2
	LONG $0x7459c4c5; WORD $0x20b2 // vmulps    ymm6, ymm7, yword [rdx + 4*rsi + 32]
	LONG $0xdb58ccc5               // vaddps    ymm3, ymm6, ymm3
	LONG $0x7459bcc5; WORD $0x40b2 // vmulps    ymm6, ymm8, yword [rdx + 4*rsi + 64]
	LONG $0x7c59b4c5; WORD $0x60b2 // vmulps    ymm7, ymm9, yword [rdx + 4*rsi + 96]
	LONG $0xe458ccc5               // vaddps    ymm4, ymm6, ymm4
	LONG $0xed58c4c5               // vaddps    ymm5, ymm7, ymm5
	LONG $0x20c68348               // add    rsi, 32
	WORD $0x3948; BYTE $0xf1       // cmp    rcx, rsi
	JNE  LBB1_5
	LONG $0xca58e4c5               // vaddps    ymm1, ymm3, ymm2
	LONG $0xc958dcc5               // vaddps    ymm1, ymm4, ymm1
	LONG $0xc958d4c5               // vaddps    ymm1, ymm5, ymm1
	LONG $0x197de3c4; WORD $0x01ca // vextractf128    xmm2, ymm1, 1
	LONG $0xca58f0c5               // vaddps    xmm1, xmm1, xmm2
	LONG $0x0579e3c4; WORD $0x01d1 // vpermilpd    xmm2, xmm1, 1
	LONG $0xca58f0c5               // vaddps    xmm1, xmm1, xmm2
	LONG $0xd116fac5               // vmovshdup    xmm2, xmm1
	LONG $0xca58f2c5               // vaddss    xmm1, xmm1, xmm2
	WORD $0x3948; BYTE $0xc1       // cmp    rcx, rax
	JE   LBB1_8

LBB1_7:
	LONG $0x145ffac5; BYTE $0x8f // vmaxss    xmm2, xmm0, dword [rdi + 4*rcx]
	LONG $0x1459eac5; BYTE $0x8a // vmulss    xmm2, xmm2, dword [rdx + 4*rcx]
	LONG $0xc958eac5             // vaddss    xmm1, xmm2, xmm1
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB1_7

LBB1_8:
	LONG $0x117ac1c4; BYTE $0x08 // vmovss    dword [r8], xmm1
	VZEROUPPER
	RET
